# CART tree
set.seed(19851003)
tr_nor <- ctree(Construction ~ Negative+Interrogative+if_clause+Clause_type,
data = nor)
# plot - adapted from https://ladal.edu.au/tree.html
# extract p-values
pvals <- unlist(nodeapply(tr_nor, ids = nodeids(tr_nor), function(n) info_node(n)$p.value))
pvals <- pvals[pvals <.05]
( tr_nor_plot <- ggparty(tr_nor) +
geom_edge() +
geom_edge_label() +
geom_node_label(line_list = list(aes(label = splitvar),
aes(label = paste0("N=", nodesize, ", p",
ifelse(pvals < .001, "<.001", paste0("=", round(pvals, 3)))),
size = 10)),
line_gpar = list(list(size = 13),
list(size = 10)),
ids = "inner") +
geom_node_label(aes(label = paste0("Node ", id, ", N = ", nodesize)),
ids = "terminal", nudge_y = -0.0, nudge_x = 0.01) +
geom_node_plot(gglist = list(
geom_bar(aes(x = "", fill = Construction),
position = position_fill(), color = "black"),
theme_minimal(),
scale_fill_grey(start = .4, end = .9),
scale_y_continuous(breaks = c(0, 1)),
xlab(""),
ylab("Probability"),
geom_text(aes(x = "", group = Construction,
label = after_stat(count)),
stat = "count", position = position_fill(), vjust = 1.1)),
shared_axis_labels = TRUE) )
# export as svg (ggsave not working for ggparty objects apparently)
# ggsave("bla.svg", width = 6, height = 6)
# png("tree_NO.png", width = 10, height = 6, un = "in", res = 300)
# plot(tr_nor)
# dev.off()
( tr_nor_plot <- ggparty(tr_nor) +
geom_edge() +
geom_edge_label() +
geom_node_label(line_list = list(aes(label = splitvar),
aes(label = paste0("N=", nodesize, ", p",
ifelse(pvals < .001, "<.001", paste0("=", round(pvals, 3)))),
size = 10)),
line_gpar = list(list(size = 13),
list(size = 10)),
ids = "inner") +
geom_node_label(aes(label = paste0("Node ", id, ", N = ", nodesize)),
ids = "terminal", nudge_y = -0.0, nudge_x = 0.01) +
geom_node_plot(gglist = list(
geom_bar(aes(x = "", fill = Construction),
position = position_fill(), color = "black"),
theme_minimal(),
scale_fill_grey(start = .4, end = .9),
scale_y_continuous(breaks = c(0, 1)),
xlab(""),
ylab("Probability"),
geom_text(aes(x = "", group = Construction,
label = after_stat(count)),
stat = "count", position = position_fill(), vjust = 1.1)),
shared_axis_labels = TRUE) )
# extract p-values
pvals <- unlist(nodeapply(tree_en, ids = nodeids(tree_en), function(n) info_node(n)$p.value))
pvals <- pvals[pvals <.05]
colnames(oanc)[which(colnames(oanc)=="gramm_person")] <- "Gramm_person"
colnames(oanc)[which(colnames(oanc)=="animacy")] <- "Animacy"
colnames(oanc)[which(colnames(oanc)=="question")] <- "Interrogative"
colnames(bnc)[which(colnames(bnc)=="question")] <- "Interrogative"
colnames(bnc)[which(colnames(bnc)=="subordinate")] <- "Clause_type"
colnames(oanc)[which(colnames(oanc)=="subordinate")] <- "Clause_type"
colnames(oanc)[which(colnames(oanc)=="negation")] <- "Negative"
colnames(bnc)[which(colnames(bnc)=="negation")] <- "Negative"
eng <- rbind(
mutate(select(oanc, Left, Key, Right, Clause_type, Gramm_person, Animacy, Interrogative, Negative, if_clause, if_clause2, cxn, cxn1, Lemma), corpus = "OANC-Spoken"),
mutate(select(bnc, Left, Key, Right,  Clause_type, Gramm_person, Animacy, Interrogative, Negative, if_clause, if_clause2, cxn, cxn1, Lemma), corpus = "SpokenBNC2014")
)
# CART tree
eng$Negative <- factor(eng$Negative)
eng$Interrogative <- factor(eng$Interrogative)
eng$if_clause2 <- factor(eng$if_clause2)
eng$Clause_type <- factor(eng$Clause_type)
eng$cxn <- factor(eng$cxn)
eng$cxn1 <- factor(eng$cxn1)
# omit NAs
eng1 <- select(eng, Negative, Interrogative, if_clause2, Clause_type, cxn1, corpus, Lemma)
eng1 <- na.omit(eng1)
# abbreviate labels - obsolete using ggparty
eng1$cxn <- case_when(eng1$cxn1=="will" ~ "w",
eng1$cxn1=="shall" ~ "s",
eng1$cxn1=="won't" ~ "wnt",
eng1$cxn1=="going to" ~ "gt",
eng1$cxn1=="gonna" ~ "gna",
eng1$cxn1=="'ll" ~ "ll")
# add lexeme
eng1$Lexeme <- factor(eng1$Lemma)
# add lexeme with reduced number of levels (bin infrequent lemmas to "other")
eng1$lexeme <- fct_lump_min(eng1$Lexeme, min = 35)
# factor
eng1$Construction <- eng1$cxn1
eng1$cxn <- factor(eng1$cxn, levels = c("w", "ll", "wnt", "s", "gt", "gna"))
# rename if-clause column to increase readability of tree diagram
eng1$if_clause <- eng1$if_clause2
# corpus as factor
eng1$corpus <- factor(eng1$corpus)
# more descriptive: use language variety instead of corpus
eng1$Variety <- ifelse(eng1$corpus == "OANC-Spoken", "AmE", "BrE")
eng1$Variety <- factor(eng1$Variety)
set.seed(1985)
tree_en <- ctree(Construction ~ Negative+Interrogative+if_clause+Clause_type+Variety,
data = eng1)
# extract p-values
pvals <- unlist(nodeapply(tree_en, ids = nodeids(tree_en), function(n) info_node(n)$p.value))
pvals <- pvals[pvals <.05]
# plot:
( tr_en_plot <- ggparty(tree_en) +
geom_edge() +
geom_edge_label() +
geom_node_label(line_list = list(aes(label = splitvar),
aes(label = paste0("N=", nodesize, ", p",
ifelse(pvals < .001, "<.001", paste0("=", round(pvals, 3)))),
size = 10)),
line_gpar = list(list(size = 13),
list(size = 10)),
ids = "inner") +
geom_node_label(aes(label = paste0("Node ", id, ", N = ", nodesize)),
ids = "terminal", nudge_y = -0.0, nudge_x = 0.01) +
geom_node_plot(gglist = list(
geom_bar(aes(x = "", fill = Construction),
position = position_fill(), color = "black"),
theme_minimal(),
scale_fill_grey(start = .4, end = .9),
scale_y_continuous(breaks = c(0, 1)),
xlab(""),
ylab("Probability"),
geom_text(aes(x = "", group = Construction,
label = after_stat(count)),
stat = "count", position = position_fill(), vjust = 1.1)),
shared_axis_labels = TRUE) )
citation("ggparty")
citation("party")
citation("party", bibtex=T)
print(citation("party"), bibtex = T)
citation()
# fitted values for out of bag sample
pred.nor <- predict(for_nor, OOB = T)
# re-import random forest
for_nor <- read_rds("for_nor.rds")
# re-import random forest
for_nor <- read_rds("rds/for_nor.rds")
# fitted values for out of bag sample
pred.nor <- predict(for_nor, OOB = T)
# export fitted values
write_rds(pred.nor, "rds/pred_nor.rds")
# re-import fitted values
pred.nor <- read_rds("rds/pred_nor.rds")
table(pred.nor)
table(nor$Cx)
table(pred.eng, nor$Cx)
table(pred.nor, nor$Cx)
sum(as.numeric(sapply(1:length(pred.nor), function(i) pred.nor[i] == nor$Cx[i]))) / length(pred.nor)
prob.crf.oob <- unlist(predict(fpr_nor, type="prob", OOB=TRUE))[c(FALSE, TRUE)]
prob.crf.oob <- unlist(predict(for_nor, type="prob", OOB=TRUE))[c(FALSE, TRUE)]
write_rds(pred.crf.oob, "rds/pred_nor_oob.rds")
write_rds(prob.crf.oob, "rds/prob_nor_oob.rds")
prob.nor.oob <- read_rds("rds/prob_nor_oob.rds")
# C value
somers2(prob.nor.oob, as.numeric(nor$Cx) - 1)
prob.nor.oob
nor$Cx
as.numeric(nor$Cx)
which(is.na(nor))
which(is.na(nor$Cx))
prob.nor.oob
pred.nor
prob.nor.oob <- predict(for_nor, type = "prob", OOB = T)
write_rds(prob.nor.oob, "rds/prob_nor_oob.rds")
prob.nor.oob <- read_rds("rds/prob_nor_oob.rds")
# C value
prob.nor.oob
as.numeric(nor$Cx)
# proportion of correct predictions
sum(as.numeric(sapply(1:length(pred.nor), function(i) pred.nor[i] == nor$Cx[i]))) / length(pred.nor)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
# Chunk 2
library(tidyverse)
library(readxl)
library(party)
library(lattice)
library(Hmisc)
library(pdp)
library(collostructions) # available at sfla.ch
library(patchwork)
library(ggparty)
library(Boruta)
library(svglite)
# Chunk 4
# read data: Norwegian
nor_bb <- read_xlsx("data/Norwegian/nota_bb_vil_skal_komer_til_a.xlsx", sheet = "bigbrother")
nor_nota <- read_xlsx("data/Norwegian/nota_bb_vil_skal_komer_til_a.xlsx", sheet = "nota")
nor <- rbind(nor_nota, nor_bb)
# clean column names
colnames(nor) <- gsub(" ", "_", colnames(nor))
# read data: English
oanc <- read_csv("data/English/OANC/oanc_spoken_going_to_shall_will_5000.csv")
bnc  <- read_xlsx("data/English/SpokenBNC2014/SPOKENBNC2014_spoken_will_shall_going_to_sample_5000-final-priming.xlsx")
# Chunk 5
# add protasis/apodosis annotation to BNC
bnc$if_clause2 <- ifelse(bnc$if_clause=="if" & bnc$subordinate=="sub", "protasis", NA)
bnc$if_clause2 <- ifelse(bnc$if_clause=="if" & bnc$subordinate=="main", "apodosis", bnc$if_clause2)
bnc$if_clause2 <- ifelse(bnc$if_clause!="if", "no", bnc$if_clause2)
# add protasis/apodosis annotation to OANC
oanc$if_clause2 <- ifelse(oanc$if_clause=="if" & oanc$subordinate=="sub", "protasis", NA)
oanc$if_clause2 <- ifelse(oanc$if_clause=="if" & oanc$subordinate=="main", "apodosis", oanc$if_clause2)
oanc$if_clause2 <- ifelse(oanc$if_clause!="if", "no", oanc$if_clause2)
# add protasis/apodosis annotation to NOR
nor$if_clause2 <- ifelse(nor$`If-clause`=="if" & nor$Clause_type=="sub", "protasis", "NA")
nor$if_clause2 <- ifelse(nor$`If-clause`=="if" & nor$Clause_type=="main", "apodosis", nor$if_clause2)
nor$if_clause2 <- ifelse(nor$`If-clause`!="if", "no", nor$if_clause2)
# Chunk 6
# OANC ---------
# binary:
oanc$cxn <- ifelse(oanc$Key %in% c("gonna", "going"), "going_to", "will")
# more fine-grained:
oanc$cxn1 <- case_when(oanc$Key == "will" ~ "will",
oanc$Key == "shall" ~ "shall",
oanc$Key == "wo" ~ "won't",
oanc$Key == "going" ~ "going to",
oanc$Key == "gonna" ~ "gonna")
oanc$cxn1 <- factor(oanc$cxn1, levels = c("will", "shall", "won't", "going to", "gonna"))
# BNC ---------
# binary
bnc$cxn <- ifelse(bnc$Key %in% c("'ll", "will", "wo"), "will", "going to")
bnc$cxn1 <- case_when(bnc$Key == "gon" ~ "gonna",
bnc$Key == "'ll" ~ "'ll",
bnc$Key == "going" ~ "going to",
bnc$Key == "will" ~ "will",
bnc$Key == "wo" ~ "won't",
bnc$Key == "shall" ~ "shall")
bnc$cxn1 <- factor(bnc$cxn1, levels = c("will", "'ll", "shall", "won't", "going to", "gonna"))
# Chunk 7
bnc  <- bnc %>% filter(keep == "y")
oanc <- oanc %>% filter(keep=="y")
nor
tibble(BNC = nrow(bnc),
OANC = nrow(oanc),
BB = nrow(filter(nor_bb, keep == "y")),
NOTA = nrow(filter(nor_nota, keep == "y")))
filter(nor_bb, keep =="y")
filter(nor_bb, keep == "y")
dplyr::filter(nor_bb, keep == "y")
tibble(BNC = nrow(bnc),
OANC = nrow(oanc),
BB = nrow(nor_bb),
NOTA = nrow(nor_nota))
table(bnc$cxn1)
table(oanc$cxn1)
as_tibble(table(bnc$cxn1))
as.data.frame(table(bnc$cxn1))
as.data.frame(table(oanc$cxn1))
as.data.frame(table(bnc$cxn1))
as.data.frame(table(oanc$cxn1))
as.data.frame(table(oanc$cxn1))$Freq
as.data.frame(table(bnc$cxn1))$Freq
tibble(BNC = as.data.frame(table(bnc$cxn1))$Freq,
OANC = as.data.frame(table(oanc$cxn1))$Freq)
# more fine-grained:
oanc$cxn1 <- case_when(oanc$Key == "will" ~ "will",
oanc$Key == "'ll" ~ "'ll",
oanc$Key == "shall" ~ "shall",
oanc$Key == "wo" ~ "won't",
oanc$Key == "going" ~ "going to",
oanc$Key == "gonna" ~ "gonna")
oanc$cxn1 <- factor(oanc$cxn1, levels = c("will", "'ll", "shall", "won't", "going to", "gonna"))
tibble(BNC = as.data.frame(table(bnc$cxn1))$Freq,
OANC = as.data.frame(table(oanc$cxn1))$Freq)
tibble(Cxn = BNC = as.data.frame(table(bnc$cxn1))$Freq$Var1,
as.data.frame(table(bnc$cxn1))
as.data.frame(table(oanc$cxn1))
setNames(as.data.frame(table(oanc$cxn1)), c("Cxn", "OANC"))
setNames(as.data.frame(table(bnc$cxn1)), c("Cxn", "BNC"))
left_join(setNames(as.data.frame(table(bnc$cxn1)), c("Cxn", "BNC")),
setNames(as.data.frame(table(oanc$cxn1)), c("Cxn", "OANC")))
left_join(setNames(as.data.frame(table(bnc$cxn1)), c("Cxn", "BNC")),
setNames(as.data.frame(table(oanc$cxn1)), c("Cxn", "OANC")))
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
# Chunk 2
library(tidyverse)
library(readxl)
library(party)
library(lattice)
library(Hmisc)
library(pdp)
library(collostructions) # available at sfla.ch
library(patchwork)
library(ggparty)
library(Boruta)
library(svglite)
# Chunk 4
# read data: Norwegian
nor_bb <- read_xlsx("data/Norwegian/nota_bb_vil_skal_komer_til_a.xlsx", sheet = "bigbrother")
nor_nota <- read_xlsx("data/Norwegian/nota_bb_vil_skal_komer_til_a.xlsx", sheet = "nota")
nor <- rbind(nor_nota, nor_bb)
# clean column names
colnames(nor) <- gsub(" ", "_", colnames(nor))
# read data: English
oanc <- read_csv("data/English/OANC/oanc_spoken_going_to_shall_will_5000.csv")
bnc  <- read_xlsx("data/English/SpokenBNC2014/SPOKENBNC2014_spoken_will_shall_going_to_sample_5000-final-priming.xlsx")
# Chunk 5
# add protasis/apodosis annotation to BNC
bnc$if_clause2 <- ifelse(bnc$if_clause=="if" & bnc$subordinate=="sub", "protasis", NA)
bnc$if_clause2 <- ifelse(bnc$if_clause=="if" & bnc$subordinate=="main", "apodosis", bnc$if_clause2)
bnc$if_clause2 <- ifelse(bnc$if_clause!="if", "no", bnc$if_clause2)
# add protasis/apodosis annotation to OANC
oanc$if_clause2 <- ifelse(oanc$if_clause=="if" & oanc$subordinate=="sub", "protasis", NA)
oanc$if_clause2 <- ifelse(oanc$if_clause=="if" & oanc$subordinate=="main", "apodosis", oanc$if_clause2)
oanc$if_clause2 <- ifelse(oanc$if_clause!="if", "no", oanc$if_clause2)
# add protasis/apodosis annotation to NOR
nor$if_clause2 <- ifelse(nor$`If-clause`=="if" & nor$Clause_type=="sub", "protasis", "NA")
nor$if_clause2 <- ifelse(nor$`If-clause`=="if" & nor$Clause_type=="main", "apodosis", nor$if_clause2)
nor$if_clause2 <- ifelse(nor$`If-clause`!="if", "no", nor$if_clause2)
# Chunk 6
# OANC ---------
# binary:
oanc$cxn <- ifelse(oanc$Key %in% c("gonna", "going"), "going_to", "will")
# more fine-grained:
oanc$cxn1 <- case_when(oanc$Key == "will" ~ "will",
oanc$Key == "'ll" ~ "'ll",
oanc$Key == "shall" ~ "shall",
oanc$Key == "wo" ~ "won't",
oanc$Key == "going" ~ "going to",
oanc$Key == "gonna" ~ "gonna")
oanc$cxn1 <- factor(oanc$cxn1, levels = c("will", "'ll", "shall", "won't", "going to", "gonna"))
# BNC ---------
# binary
bnc$cxn <- ifelse(bnc$Key %in% c("'ll", "will", "wo"), "will", "going to")
bnc$cxn1 <- case_when(bnc$Key == "gon" ~ "gonna",
bnc$Key == "'ll" ~ "'ll",
bnc$Key == "going" ~ "going to",
bnc$Key == "will" ~ "will",
bnc$Key == "wo" ~ "won't",
bnc$Key == "shall" ~ "shall")
bnc$cxn1 <- factor(bnc$cxn1, levels = c("will", "'ll", "shall", "won't", "going to", "gonna"))
# Chunk 7
bnc  <- bnc %>% filter(keep == "y")
oanc <- oanc %>% filter(keep=="y")
# Chunk 8
left_join(setNames(as.data.frame(table(bnc$cxn1)), c("Cxn", "BNC")),
setNames(as.data.frame(table(oanc$cxn1)), c("Cxn", "OANC")))
# Chunk 9
# Norwegian: ---------------
# relevant variables as factors
nor$Cx <- factor(nor$Cx)
nor$Negative <- factor(nor$Negative)
nor$Interrogative <- factor(nor$Interrogative)
nor$if_clause2 <- factor(nor$if_clause2)
nor$Clause_type <- factor(nor$Clause_type)
# reduce number of levels for Lexeme
nor$Lexeme <- factor(nor$Lexeme)
nor$lexeme <- fct_lump_min(nor$Lexeme, min = 50, other_level = "other")
# more descriptive name
nor$Construction <- nor$Cx
# shorter cx labels (obsolete now that we're using ggparty)
nor$cxn <- case_when(nor$Cx == "kommer" ~ "k",
nor$Cx == "skal" ~ "s",
nor$Cx == "vil" ~ "v")
nor$cxn <- factor(nor$cxn)
# shorter if clause label
nor$if_clause <- nor$if_clause2
# CART tree
set.seed(19851003)
tr_nor <- ctree(Construction ~ Negative+Interrogative+if_clause+Clause_type,
data = nor)
# plot - adapted from https://ladal.edu.au/tree.html
# extract p-values
pvals <- unlist(nodeapply(tr_nor, ids = nodeids(tr_nor), function(n) info_node(n)$p.value))
pvals <- pvals[pvals <.05]
( tr_nor_plot <- ggparty(tr_nor) +
geom_edge() +
geom_edge_label() +
geom_node_label(line_list = list(aes(label = splitvar),
aes(label = paste0("N=", nodesize, ", p",
ifelse(pvals < .001, "<.001", paste0("=", round(pvals, 3)))),
size = 10)),
line_gpar = list(list(size = 13),
list(size = 10)),
ids = "inner") +
geom_node_label(aes(label = paste0("Node ", id, ", N = ", nodesize)),
ids = "terminal", nudge_y = -0.0, nudge_x = 0.01) +
geom_node_plot(gglist = list(
geom_bar(aes(x = "", fill = Construction),
position = position_fill(), color = "black"),
theme_minimal(),
scale_fill_grey(start = .4, end = .9),
scale_y_continuous(breaks = c(0, 1)),
xlab(""),
ylab("Probability"),
geom_text(aes(x = "", group = Construction,
label = after_stat(count)),
stat = "count", position = position_fill(), vjust = 1.1)),
shared_axis_labels = TRUE) )
# export as pdf (ggsave not working for ggparty objects apparently)
# png("figures/tree_NO.png", width = 10, height = 6, un = "in", res = 300)
# plot(tr_nor)
# dev.off()
# Chunk 12
# re-import random forest
for_nor <- read_rds("rds/for_nor.rds")
# re-import variable importance
vi      <- read_rds("rds/vi.rds")
# Chunk 13
(vi_plot_nor <- as.data.frame(vi) %>% rownames_to_column() %>% ggplot(aes(y = fct_reorder(rowname, vi), x = vi)) +
geom_point(size = 5) + xlim(min(vi), max(vi)) +
theme_bw() +
theme(panel.grid.major.x = element_blank()) +
theme(panel.grid.minor = element_blank()) + xlab("Conditional variable importance") + ylab("Variable") +
theme(axis.text = element_text(size = 18)) +
theme(axis.title = element_text(size = 18)) +
theme(strip.text = element_text(size = 18)) +
theme(legend.text = element_text(size = 18)) +
theme(legend.title = element_text(size = 18, face = "bold")) +
theme(text = element_text(size = 18)))
# Chunk 16
# re-import fitted values
pred.nor <- read_rds("rds/pred_nor.rds")
# Chunk 17
# proportion of correct predictions
sum(as.numeric(sapply(1:length(pred.nor), function(i) pred.nor[i] == nor$Cx[i]))) / length(pred.nor)
colnames(oanc)[which(colnames(oanc)=="gramm_person")] <- "Gramm_person"
colnames(oanc)[which(colnames(oanc)=="animacy")] <- "Animacy"
colnames(oanc)[which(colnames(oanc)=="question")] <- "Interrogative"
colnames(bnc)[which(colnames(bnc)=="question")] <- "Interrogative"
colnames(bnc)[which(colnames(bnc)=="subordinate")] <- "Clause_type"
colnames(oanc)[which(colnames(oanc)=="subordinate")] <- "Clause_type"
colnames(oanc)[which(colnames(oanc)=="negation")] <- "Negative"
colnames(bnc)[which(colnames(bnc)=="negation")] <- "Negative"
eng <- rbind(
mutate(select(oanc, Left, Key, Right, Clause_type, Gramm_person, Animacy, Interrogative, Negative, if_clause, if_clause2, cxn, cxn1, Lemma), corpus = "OANC-Spoken"),
mutate(select(bnc, Left, Key, Right,  Clause_type, Gramm_person, Animacy, Interrogative, Negative, if_clause, if_clause2, cxn, cxn1, Lemma), corpus = "SpokenBNC2014")
)
# CART tree
eng$Negative <- factor(eng$Negative)
eng$Interrogative <- factor(eng$Interrogative)
eng$if_clause2 <- factor(eng$if_clause2)
eng$Clause_type <- factor(eng$Clause_type)
eng$cxn <- factor(eng$cxn)
eng$cxn1 <- factor(eng$cxn1)
na.omit(eng)
# omit NAs
eng1 <- select(eng, Negative, Interrogative, if_clause2, Clause_type, cxn1, corpus, Lemma)
eng1 <- na.omit(eng1)
# abbreviate labels - obsolete using ggparty
eng1$cxn <- case_when(eng1$cxn1=="will" ~ "w",
eng1$cxn1=="shall" ~ "s",
eng1$cxn1=="won't" ~ "wnt",
eng1$cxn1=="going to" ~ "gt",
eng1$cxn1=="gonna" ~ "gna",
eng1$cxn1=="'ll" ~ "ll")
eng$cxn
eng1$cxn
# add lexeme
eng1$Lexeme <- factor(eng1$Lemma)
# add lexeme with reduced number of levels (bin infrequent lemmas to "other")
eng1$lexeme <- fct_lump_min(eng1$Lexeme, min = 35)
# factor
eng1$Construction <- eng1$cxn1
eng1$cxn <- factor(eng1$cxn, levels = c("w", "ll", "wnt", "s", "gt", "gna"))
# rename if-clause column to increase readability of tree diagram
eng1$if_clause <- eng1$if_clause2
# corpus as factor
eng1$corpus <- factor(eng1$corpus)
# more descriptive: use language variety instead of corpus
eng1$Variety <- ifelse(eng1$corpus == "OANC-Spoken", "AmE", "BrE")
eng1$Variety <- factor(eng1$Variety)
set.seed(1985)
tree_en <- ctree(Construction ~ Negative+Interrogative+if_clause+Clause_type+Variety,
data = eng1)
# extract p-values
pvals <- unlist(nodeapply(tree_en, ids = nodeids(tree_en), function(n) info_node(n)$p.value))
pvals <- pvals[pvals <.05]
# plot:
( tr_en_plot <- ggparty(tree_en) +
geom_edge() +
geom_edge_label() +
geom_node_label(line_list = list(aes(label = splitvar),
aes(label = paste0("N=", nodesize, ", p",
ifelse(pvals < .001, "<.001", paste0("=", round(pvals, 3)))),
size = 10)),
line_gpar = list(list(size = 13),
list(size = 10)),
ids = "inner") +
geom_node_label(aes(label = paste0("Node ", id, ", N = ", nodesize)),
ids = "terminal", nudge_y = -0.0, nudge_x = 0.01) +
geom_node_plot(gglist = list(
geom_bar(aes(x = "", fill = Construction),
position = position_fill(), color = "black"),
theme_minimal(),
scale_fill_grey(start = .4, end = .9),
scale_y_continuous(breaks = c(0, 1)),
xlab(""),
ylab("Probability"),
geom_text(aes(x = "", group = Construction,
label = after_stat(count)),
stat = "count", position = position_fill(), vjust = 1.1)),
shared_axis_labels = TRUE) )
oanc$cxn1
eng1$corpus
which(eng1$corpus == "OANC-Spoken")
which(eng1$corpus == "OANC-Spoken" & eng1$cxn=="ll")
eng1$cxn
which(eng1$corpus == "OANC-Spoken")
